@page "/ContainerDetail/{*ContainerId}"
<RadzenCard Class="w-100">
    <div class="row pb-1">
        <div class="col-2 d-flex flex-column">
            <RadzenDatePicker @bind-Value=@_dateTimeDatePicker ShowTime="true" ShowSeconds="true" HoursStep="1.5" MinutesStep="5" SecondsStep="10" Change=@(args => OnDateTimeChange(args, "MM/dd/yyyy HH:mm")) DateFormat="MM/dd/yyyy HH:mm" Class="w-100"/>
        </div>
        <div class="col-5 d-flex flex-column">
            <RadzenSelectBar @bind-Value=@_value TValue="int" Multiple="false" Change=@(args => OnSampleRateChange(args))>
                <Items>
                    <RadzenSelectBarItem Text="Live" Value="0"/>
                    <RadzenSelectBarItem Text="Hour" Value="1"/>
                    <RadzenSelectBarItem Text="Day" Value="2"/>
                    <RadzenSelectBarItem Text="Month" Value="3"/>
                    <RadzenSelectBarItem Text="Year" Value="4"/>
                    <RadzenSelectBarItem Text="All" Value="5"/>
                </Items>
            </RadzenSelectBar>
        </div>
        <div class="col-3 d-flex flex-column">
            <h3>@containerId</h3>
            @if (_notRunning)
            {
                @if (_container != null)
                {
                    <p style="background-color:tomato;">Container is not running since @_container.lastRecord</p>
                }
                else
                {
                    <p style="background-color:tomato;">Container is not running</p>
                }
            }
        </div>
        <div class="col-2 d-flex flex-column">
            <RadzenButton Click=@(args => AddNotificationOnClick()) Text="Add notification" Icon="add_circle_outline" ButtonStyle="ButtonStyle.Primary"/>
        </div>
    </div>
</RadzenCard>
<RadzenFieldset Text="CPU Usage" class="mb-4">
    <div class="row pb-1">
        <div class="col-7 d-flex flex-column">
            <RadzenCard Class="w-100">
                <h3>CPU load</h3>
                <RadzenChart Style="height: 200px">
                    <RadzenAreaSeries Data="@_cpuData" CategoryProperty="dateTime" Title="Total       " LineType="LineType.Dotted" ValueProperty="totalPercents">
                    </RadzenAreaSeries>
                    <RadzenAreaSeries Data="@_cpuData" CategoryProperty="dateTime" Title="User space  " ValueProperty="userSpacePercents">
                    </RadzenAreaSeries>
                    <RadzenAreaSeries Data="@_cpuData" CategoryProperty="dateTime" Title="Kernel space" LineType="LineType.Dashed" ValueProperty="kernelSpacePercents">
                    </RadzenAreaSeries>

                    <RadzenCategoryAxis Formatter=@(value => 
                                                  { if (_value == 0){ return ((DateTime) value).ToString("HH:mm:ss"); }
                                                    if(_value == 1) { return ((DateTime) value).ToString("HH:mm:ss"); }
                                                    if(_value == 2) { return ((DateTime) value).ToString("HH:mm:ss"); }
                                                    if(_value == 3) { return ((DateTime) value).ToString("MM/dd/yyyy"); }
                                                    if(_value == 4) { return ((DateTime) value).ToString("MM/dd/yyyy"); }
                                                      return ((DateTime) value).ToString();
                                        })/>

                    <RadzenValueAxis Formatter=@(value => ((double) Int32.Parse((value).ToString()) / 1000).ToString() + " %")/>

                    <RadzenLegend Position="LegendPosition.Top"/>
                </RadzenChart>
            </RadzenCard>
        </div>
        <div class="col-5 d-flex flex-column">
            <RadzenCard Class="w-100">
                <div class="row pb-1">
                    <div class="col-4 d-flex flex-column">
                        <h3>CPU throttle</h3>
                    </div>
                    <div class="col-8 d-flex  justify-content-end">
                        <div class="flex-column">
                            @if (_lastCpuSample != null)
                            {
                                <p>Throttle total count: @_lastCpuSample.throttleCount</p>
                            }
                        </div>
                    </div>
                </div>
                <RadzenChart Style="height: 200px">
                    <RadzenAreaSeries Data="@_cpuData" CategoryProperty="dateTime" Title="Throttle ms" LineType="LineType.Solid" ValueProperty="throttleMs">
                    </RadzenAreaSeries>
                    <RadzenValueAxis Formatter=@(value => ((value).ToString() + " ms"))/>
                       <RadzenCategoryAxis Formatter=@(value => 
                                                                      { if (_value == 0){ return ((DateTime) value).ToString("HH:mm:ss"); }
                                                                        if(_value == 1) { return ((DateTime) value).ToString("HH:mm:ss"); }
                                                                        if(_value == 2) { return ((DateTime) value).ToString("HH:mm:ss"); }
                                                                        if(_value == 3) { return ((DateTime) value).ToString("MM/dd/yyyy"); }
                                                                        if(_value == 4) { return ((DateTime) value).ToString("MM/dd/yyyy"); }
                                                                          return ((DateTime) value).ToString();
                                                            })/>
                    <RadzenLegend Visible="false"/>
                </RadzenChart>
            </RadzenCard>

        </div>
    </div>
</RadzenFieldset>
<RadzenFieldset Text="Memory" class="mb-2">
    <div class="row pb-1">
        <div class="col-7 d-flex flex-column">
            <RadzenCard Class="w-100">
                <div class="row pb-1">
                    <div class="col-4 d-flex flex-column">
                        <h3>Memory usage</h3>
                    </div>
                    <div class="col-4 d-flex  justify-content-end">
                        <div class="flex-column">
                            @if (_lastMemorySample != null)
                            {
                                <p>Memory limit: @_lastMemorySample.memoryLimit b</p>
                                <p>Memory + swap limit: @_lastMemorySample.memoryAndSwapLimit b</p>
                            }
                        </div>
                    </div>
                    <div class="col-4 d-flex  justify-content-end">
                        <div class="flex-column">
                            @if (_lastMemorySample != null)
                            {
                                <p>Memory limit hit count: @_lastMemorySample.memoryLimitHitCount</p>
                                <p>Memory + swap limit hit count: @_lastMemorySample.memoryAndSwapLimitHitCount</p>
                            }

                        </div>
                    </div>
                </div>
                <RadzenChart Style="height: 200px">
                    <RadzenAreaSeries Data="@_memoryData" CategoryProperty="dateTime" Title="Memory" LineType="LineType.Solid" ValueProperty="memoryUsed">
                    </RadzenAreaSeries>
                    <RadzenAreaSeries Data="@_memoryData" CategoryProperty="dateTime" Title="Swap" LineType="LineType.Dashed" ValueProperty="swap">
                    </RadzenAreaSeries>
                    <RadzenAreaSeries Data="@_memoryData" CategoryProperty="dateTime" Title="Total" LineType="LineType.Dotted" ValueProperty="memoryAndSwapUsed">
                    </RadzenAreaSeries>
                    <RadzenValueAxis Formatter=@(value => ((double) long.Parse((value).ToString()) / 1000000).ToString() + " MB")/>
                       <RadzenCategoryAxis Formatter=@(value => 
                                                                      { if (_value == 0){ return ((DateTime) value).ToString("HH:mm:ss"); }
                                                                        if(_value == 1) { return ((DateTime) value).ToString("HH:mm:ss"); }
                                                                        if(_value == 2) { return ((DateTime) value).ToString("HH:mm:ss"); }
                                                                        if(_value == 3) { return ((DateTime) value).ToString("MM/dd/yyyy"); }
                                                                        if(_value == 4) { return ((DateTime) value).ToString("MM/dd/yyyy"); }
                                                                          return ((DateTime) value).ToString();
                                                            })/>
                    <RadzenLegend Position="LegendPosition.Top"/>
                </RadzenChart>
            </RadzenCard>
        </div>
        <div class="col-5 d-flex flex-column">
            <RadzenCard Class="w-100">
                <div class="row pb-1">
                    <div class="col-7 d-flex flex-column">
                        <h3>RSS usage</h3>
                    </div>
                    <div class="col-5 d-flex  justify-content-end">
                        <div class="flex-column">

                        </div>


                    </div>
                </div>
                <RadzenChart Style="height: 200px">
                    <RadzenAreaSeries Data="@_memoryData" CategoryProperty="dateTime" Title="RSS" LineType="LineType.Solid" ValueProperty="rss">
                    </RadzenAreaSeries>

                      <RadzenCategoryAxis Formatter=@(value => 
                                                                     { if (_value == 0){ return ((DateTime) value).ToString("HH:mm:ss"); }
                                                                       if(_value == 1) { return ((DateTime) value).ToString("HH:mm:ss"); }
                                                                       if(_value == 2) { return ((DateTime) value).ToString("HH:mm:ss"); }
                                                                       if(_value == 3) { return ((DateTime) value).ToString("MM/dd/yyyy"); }
                                                                       if(_value == 4) { return ((DateTime) value).ToString("MM/dd/yyyy"); }
                                                                         return ((DateTime) value).ToString();
                                                           })/>
                    <RadzenValueAxis Formatter=@(value => ((double) long.Parse((value).ToString()) / 1000000).ToString() + " MB")/>
                    <RadzenLegend Visible="false"/>
                </RadzenChart>
            </RadzenCard>
        </div>
    </div>
</RadzenFieldset>
<div class="row pb-1">
    <div class="col-7 d-flex flex-column">
        <RadzenFieldset Text="Net" class="mb-2">
            <div class="row pb-1">
                <div class="col-8 d-flex flex-column">
                    <RadzenCard Class="w-100">
                        <div class="row pb-1">
                            <div class="col-4 d-flex flex-column">
                                <h3>Network trafic</h3>
                            </div>
                            <div class="col-4 d-flex  justify-content-end">
                                <div class="flex-column">

                                </div>
                            </div>
                        </div>
                        <RadzenChart Style="height: 200px">
                            <RadzenAreaSeries Data="@_netData" CategoryProperty="dateTime" Title="Receive" LineType="LineType.Solid" ValueProperty="receive">
                            </RadzenAreaSeries>
                            <RadzenAreaSeries Data="@_netData" CategoryProperty="dateTime" Title="Transmit" LineType="LineType.Dashed" ValueProperty="transmit">
                                <RadzenValueAxis Formatter=@(value => ((double) long.Parse((value).ToString()) / 1000000).ToString() + " MB")/>
                            </RadzenAreaSeries>
                              <RadzenCategoryAxis Formatter=@(value => 
                                                                             { if (_value == 0){ return ((DateTime) value).ToString("HH:mm:ss"); }
                                                                               if(_value == 1) { return ((DateTime) value).ToString("HH:mm:ss"); }
                                                                               if(_value == 2) { return ((DateTime) value).ToString("HH:mm:ss"); }
                                                                               if(_value == 3) { return ((DateTime) value).ToString("MM/dd/yyyy"); }
                                                                               if(_value == 4) { return ((DateTime) value).ToString("MM/dd/yyyy"); }
                                                                                 return ((DateTime) value).ToString();
                                                                   })/>
                            <RadzenLegend Position="LegendPosition.Top"/>
                        </RadzenChart>
                    </RadzenCard>
                </div>
                <div class="col-4 d-flex flex-column">
                    <RadzenCard Class="w-100">
                        <div class="row pb-1">
                            <div class="col-10 d-flex flex-column">
                                <h3>Network Errors</h3>
                            </div>
                            <div class="col-2 d-flex  justify-content-end">
                                <div class="flex-column">

                                </div>
                            </div>
                        </div>
                        <RadzenChart Style="height: 200px">
                            <RadzenAreaSeries Data="@_netData" CategoryProperty="dateTime" Title="Receive Err." LineType="LineType.Solid" ValueProperty="receiveErrorCountPeriod">
                            </RadzenAreaSeries>
                            <RadzenAreaSeries Data="@_netData" CategoryProperty="dateTime" Title="Transmit Err." LineType="LineType.Dashed" ValueProperty="transmitErrorCountPeriod">

                            </RadzenAreaSeries>
                               <RadzenCategoryAxis Formatter=@(value => 
                                                                              { if (_value == 0){ return ((DateTime) value).ToString("HH:mm:ss"); }
                                                                                if(_value == 1) { return ((DateTime) value).ToString("HH:mm:ss"); }
                                                                                if(_value == 2) { return ((DateTime) value).ToString("HH:mm:ss"); }
                                                                                if(_value == 3) { return ((DateTime) value).ToString("MM/dd/yyyy"); }
                                                                                if(_value == 4) { return ((DateTime) value).ToString("MM/dd/yyyy"); }
                                                                                  return ((DateTime) value).ToString();
                                                                    })/>
                            <RadzenLegend Position="LegendPosition.Top"/>
                        </RadzenChart>
                    </RadzenCard>
                </div>
            </div>
        </RadzenFieldset>
    </div>
    <div class="col-5 d-flex flex-column">
        <RadzenFieldset Text="IO" class="mb-2">
            <RadzenCard Class="w-100">
                <div class="row pb-1">
                    <div class="col-4 d-flex flex-column">
                        <h3>IO comunication</h3>
                    </div>
                    <div class="col-4 d-flex  justify-content-end">
                        <div class="flex-column">

                        </div>
                    </div>
                </div>
                <RadzenChart Style="height: 200px">
                    <RadzenAreaSeries Data="@_ioData" CategoryProperty="dateTime" Title="byteRead" LineType="LineType.Solid" ValueProperty="byteRead">
                    </RadzenAreaSeries>
                    <RadzenAreaSeries Data="@_ioData" CategoryProperty="dateTime" Title="byteWrite" LineType="LineType.Solid" ValueProperty="byteWrite">
                    </RadzenAreaSeries>
                    <RadzenValueAxis Formatter=@(value => ((double) long.Parse((value).ToString()) / 1000000).ToString() + " MB")/>
                       <RadzenCategoryAxis Formatter=@(value => 
                                                                      { if (_value == 0){ return ((DateTime) value).ToString("HH:mm:ss"); }
                                                                        if(_value == 1) { return ((DateTime) value).ToString("HH:mm:ss"); }
                                                                        if(_value == 2) { return ((DateTime) value).ToString("HH:mm :ss"); }
                                                                        if(_value == 3) { return ((DateTime) value).ToString("MM/dd/yyyy"); }
                                                                        if(_value == 4) { return ((DateTime) value).ToString("MM/dd/yyyy"); }
                                                                          return ((DateTime) value).ToString();
                                                            })/>
                    <RadzenLegend Position="LegendPosition.Top"/>
                </RadzenChart>
            </RadzenCard>
        </RadzenFieldset>
    </div>
</div>